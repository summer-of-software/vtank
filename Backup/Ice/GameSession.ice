/**
	@file GameSession.ice
	@brief Holds methods that the client will call to perform or receive in-game actions.
	@author (C) Copyright 2009 by Vermont Technical College
*/

#ifndef GAMESESSION_ICE
#define GAMESESSION_ICE

#include <Exception.ice>
#include <VTankObjects.ice>
#include <Glacier2/Session.ice>

/**
    The GameSession module contains the methods and interfaces that the client uses to
    actually perform in-game actions. If the client starts moving his/her tank, the
    client should call the appropriate method under the session to notify the server
    (and everyone else) of this action.
*/
module GameSession
{
    /**
        Each player has an alliance assigned to them, even if it is NONE (no team).
    */
    enum Alliance
    {
        NONE,
        RED,
        BLUE
    };
    
    /**
        The Tank struct holds attributes for an in-game tank.
        It's significant to note that the tank has an ID number. This is to make it
        easier to look up players. When the server notifies other clients of another
        client's action, it references him by his ID number.
        The ID number is generated by the server.
    */
    struct Tank
    {
        int id;
        double angle;
        bool alive;
        VTankObject::Point position;
        VTankObject::TankAttributes attributes;
        GameSession::Alliance team;
    };
    
    /** The sequence of tanks represents a list of players. */
    sequence<GameSession::Tank> PlayerList;
	
	/**
		The ScoreboardTotals struct is meant soley to hand accurate information about
		a team game over to players for the purpose of accurate scoreboard displays.
	*/
	struct ScoreboardTotals
	{
		int killsRed;
		int killsBlue;
		int capturesRed;
		int capturesBlue;
		int completedRed;
		int completedBlue;
	};
    
    /**
        The GameInfo interface is a two-way connection between the client and the 
        server, where the server implements the interface while the client calls it.
    */
    interface GameInfo extends Glacier2::Session
    {
		/**
			Let the server know that we are ready to receive game events.
		*/
		void Ready();
		
        /**
            The client can ask which players are currently online.
            @return List of players.
        */
        GameSession::PlayerList GetPlayerList();
        
        /**
            Get the name of the map that is being played.
            @return Current map name.
        */
        string GetCurrentMapName();
        
        /**
            Get the time left for the map being played.
            @return Map name.
        */
        double GetTimeLeft();
		
		/**
			Get the game mode that the server is currently running.
			@return Mode of the current game.
		*/
		VTankObject::GameMode GetGameMode();
        
        /**
            Get the score for the current game. This should only be called once -- it's up to the player
			to re-calculate the score for the rest of the game.
			@return List of statistics for each player.
        */
        VTankObject::StatisticsList GetScoreboard();
		
		/**
			Get the total score for both teams. This should only be used in team-based scenarios.
			@return A struct containing team score information.
		*/
		GameSession::ScoreboardTotals GetTeamTotals();
    //};
    
    /**
        The CurrentGame interface handles client actions. It also allows the client to
        set a in-game action callback so that the client is notified every time an
        action from another client occurs.
        
        NOTE: In favor of only using one adapter, the GameInfo and CurrentGame interfaces
        are being merged.
    */
    //interface CurrentGame
    //{
        /**
            The client can prevent himself from being disconnected by calling this
            frequently.
        */
        ["ami"] void KeepAlive();
        
        /**
            Notify the server that the client's tank has either started moving forward,
            started moving in reverse, or has completely stopped moving.
            If the (x, y) position is too far-fetched, the server will refuse the action
            and send a message through the callback demanding a reset position.
            @param timestamp The client will produce a timestamp of the exact moment it
            performed the action for synchronization purposes.
            @param point Position of the tank on the map where this action occurred. 
            This allows the server to sync exactly where the client started moving, 
            rather than guess.
            @param direction Valid directions:<br>
                NONE - The tank stopped moving.<br>
                FORWARD - The tank is moving forward.<br>
                REVERSE - The tank is moving in reverse.
        */
        ["ami"] void Move(long timestamp, VTankObject::Point point, 
            VTankObject::Direction direction);
        
        /**
            Send notification to the server that the client is either rotating left,
            rotating right, or not rotating at all.
            @param timestamp The client will produce a timestamp of the exact moment it
            performed the action for synchronization purposes.
            @param angle Angle that the client was facing when it stopped spinning.
            If the angle is impossible, the server will protest and send a reset angle
            message back through the callback interface.
            @param direction Valid directions:<br>
                NONE - The tank stopped rotating.<br>
                LEFT - The tank is rotating left.<br>
                RIGHT - The tank is rotating right.
        */
        ["ami"] void Rotate(long timestamp, double angle, 
            VTankObject::Direction direction);
        
        /**
            Notify the server that the client is either spinning it's turret left, or
            spinning the turret right. Since this action is not a big deal, no checks 
            are made to see if the angle is correct.
            @param timestamp The client will produce a timestamp of the exact moment it
            performed the action for synchronization purposes.
            @param angle The current angle of the turret.
            @param direction Valid directions:<br>
                NONE - The turret is not spinning.<br>
                LEFT - The turret is spinning left.<br>
                RIGHT - The turret is spinning right.
        */
        ["ami"] void SpinTurret(long timestamp, double angle, 
           VTankObject::Direction direction);
        
        /**
            Notify the server that the client wishes to fire a projectile.  The server
            already knows the properties of the tank, including it's position, angle,
            current weapon, last time the weapon was fired, anything else relevant to
            this action.
            @param timestamp The client will produce a timestamp of the exact moment it
            performed the action for synchronization purposes.
            @param target Target that the client is firing at.  This is helpful for the
            server as it shows which direction the client is firing in.
        */
        ["ami"] void Fire(long timestamp, VTankObject::Point target);
        
        /**
            Send a chat message to the server. This includes any '/'-commands.
            @param message Message to send.
        */
        ["ami"] void SendMessage(string message);
        
        /**
			Start charging a weapon. This method call is ignored if the weapon the
			player is holding cannot be charged.
        */
        ["ami"] void StartCharging();
		
		/**
			
		*/
		/*["ami"] void GetCurrentUtilities(VTankObject::Utility *utils,
			sequence<int> *ids);*/
    };
	
	/**
		ProjectileDamageInfo holds information about a player who has been hit by
		a projectile. This struct is intended to be used as a list (as in, several
		people have gotten hit by projectiles).
	*/
	struct ProjectileDamageInfo
	{
		int ownerId;
		int projectileId;
		int projectileTypeId;
		long spawnTimeMilliseconds; // How long to wait until the projectile spawns.
		VTankObject::Point target;
	};
	
	/** Contains a sequence of ProjectileDamageList structs. */
	sequence<ProjectileDamageInfo> ProjectileDamageList;
    
    /**
        The client callback is a set of methods on the client that the server calls 
        when an in-game action occurs that the server feels the client should know
        about.  This also contains methods that the server uses to enforce anti-cheating
        on the client.  For instance, the server will demand that the client reset
        it's position to a certain point if the last client move is impossible.
    */
    interface ClientEventCallback
    {
        /**
            Tell the client that a player joined the game.
            @param tank Properties of the new player.
        */
        ["ami"] void PlayerJoined(GameSession::Tank tank);
        
        /**
            Tell the client that a player left the game.
            @param id Identifying number of the new player.
        */
        ["ami"] void PlayerLeft(int id);
        
        /**
            Update the client on a certain player's movements.
            @param id Player ID.
            @param point Starting position of the tank.
            @param direction The direction will either be NONE, FORWARD, or REVERSE.
        */
        ["ami"] void PlayerMove(int id, VTankObject::Point point, 
            VTankObject::Direction direction);
        
        /**
            Update the client on a certain player's angle and rotation.
            @param id Player ID.
            @param angle Starting angle of the tank.
            @param direction The direction will either be NONE, LEFT, or RIGHT.
        */
        ["ami"] void PlayerRotate(int id, double angle, 
            VTankObject::Direction direction);
        
        /**
            Update the client on a certain player's turret position.
            @param id Player ID.
            @param angle Starting angle of the turret.
            @param direction The direction will either be NONE, LEFT, or RIGHT.
        */
        ["ami"] void TurretSpinning(int id, double angle, 
            VTankObject::Direction direction);
        
        /**
            Tell the client that another player has taken damage. It's up to the player
            to determine whether or not this damage destroys the other tank.
            @param id Player ID.
			@param projectileId ID number of the projectile.
			@param owner ID of the person who fired the projectile.
            @param damageTaken Amount of damage inflicted.
			@param killingBlow True if this shot killed the player; false otherwise.
        */
        ["ami"] void PlayerDamaged(int id, int projectileId, int owner, int damageTaken,
			bool killingBlow);
		
		/**
			Tell the client that an envrionmental effect (i.e. fire on the ground) has
			spawned.
			@param id ID of the environment effect. This is similar to a player ID and
				projectile ID in that the number is a unique, temporary number.
			@param typeId Type ID of environmental effect to use.
			@param ownerId Person who caused the environment effect to spawn. Can be
				-1 if it is a natural spawn.
			@param position Position of the environmental effect.
		*/
		["ami"] void SpawnEnvironmentEffect(int id, int typeId, int ownerId,
			VTankObject::Point position);
		
		/**
			Tell the clients that a player was damaged by an environmental effect.
			@param playerId ID of the player being damaged.
			@param environId ID of the environmental effect dealing damage.
			@param damageTaken Amount of damage taken.
			@param killingBlow True if the damage killed the player; false otherwise.
		*/
		["ami"] void PlayerDamagedByEnvironment(int playerId, int environId,
			int damageTaken, bool killingBlow);
        
        /**
            Tell the client that a player has respawned.
            @param id Player ID.
            @param where Position of the tank.
        */
        ["ami"] void PlayerRespawned(int id, VTankObject::Point where);
        
        /**
            Create a projectile for the client.
            @param ownerId Player who fired the projectile.
            @param projectileId ID of the projectile.
            @param projectileTypeId ID of the type of projectile to fire.
            @param point The target that the projectile is aiming at. Note that this 
            does not mean the position of the projectile, or the death point of the
            projectile. The client must calculate the angle (relative to the tank) that
            the projectile is moving at based on this point.
        */
        ["ami"] void CreateProjectile(int ownerId, int projectileId, 
            int projectileTypeId, VTankObject::Point point);
		
		
		/**
			Create several projectiles for the client. This is usually used in cases
			where 
			@param list List of people 
		*/
		["ami"] void CreateProjectiles(ProjectileDamageList list);
        
        /**
            Destroy a projectile (happens if a projectile hits a wall or such.)
            Note that it is usually up to the client to automatically remove projectiles
            that expire or projectiles that collide with a wall. This function is
            used for special cases.
            @param projectileId ID of the projectile.
        */
        ["ami"] void DestroyProjectile(int projectileId);
        
        /**
            Send the client a chat message. It's assumed that the server has already
            pre-pended the author's name onto the message if it is a chat message sent
            by another player.
            @param message Formatted message.
            @param color Color of the message.
        */
        ["ami"] void ChatMessage(string message, VTankObject::VTankColor color);
        
        /**
            Force the client to reset his position.
            @param point New position of the tank.
        */
        ["ami"] void ResetPosition(VTankObject::Point point);
        
        /**
            Force the client to change it's angle.
            @param angle Angle of the tank.
        */
        ["ami"] void ResetAngle(double angle);
		
		/**
			Tell the client to rotate to a new map, which will cause them to load a new 
			game in the same way that they did when they originally joined the server.
		*/
		["ami"] void RotateMap();
		
		/**
			Spawn a utility (power-up) somewhere on the map.
			@param utilityID For the sake of adding/removing utilities to/from the game,
				each utility has an associated ID.
			@param utility Type of utility to create.
			@param pos Position of the utility.
		*/
		["ami"] void SpawnUtility(int utilityId, VTankObject::Utility utility, 
			VTankObject::Point pos);
		
		/**
			Apply a utility to a player.
			@param utilityID ID of the utility which was added.
			@param utility Type of utility to apply.
			@param playerID ID of the player who obtained the power-up.
		*/
		["ami"] void ApplyUtility(int utilityId, VTankObject::Utility utility,
		    int playerId);
		
		/* Capture the Flag */
		
		/**
			A player has dropped the flag. It is waiting to be picked up.
			@param droppedId ID of the player who dropped the flag.
			@param where Position of the flag.
			@param flagColor Which team's flag was dropped (e.g. if a Red tank is
				carrying a flag, that flag's color must be Blue).
		*/
		["ami"] void FlagDropped(int droppedId, VTankObject::Point where,
			GameSession::Alliance flagColor);
		
		/**
			A flag has been returned by it's team. For example, if a red tank rolls over
			a red flag, the flag is returned to the red team's flag spawn point, if it
			was not already there.
			@param returnedById ID of the player who returned the flag.
		*/
		["ami"] void FlagReturned(int returnedById, GameSession::Alliance flagColor);
		
		/**
			A flag has been picked up by an opponent. For example, a Red flag has been
			picked up by a Blue tank.
			@param pickedUpById ID of the tank who picked the flag up.
			@param flagColor The team color associated to the flag.
		*/
		["ami"] void FlagPickedUp(int pickedUpById, GameSession::Alliance flagColor);
		
		/**
			A flag has been captured. For example, a Red flag has been picked up and
			brought back to the Blue base by a Blue player.
			
			Note: This implies FlagDespawned for both flags until FlagSpawned is called
			by the server.
			@param capturedById ID of the tank who captured the flag.
			@param flagColor The team color associated to the flag (e.g. if a Red flag
			is captured by the Blue team, then flagColor is Red).
		*/
		["ami"] void FlagCaptured(int capturedById, GameSession::Alliance flagColor);
		
		/**
			A flag has spawned. This event is server-based, and is not influenced by
			players.
			
			Note that this method may be called by the server as a shortcut to move
			an existant flag instantaenously to a new location in exceptional cases
			(for example if a player leaves while holding a flag, this may be called
			in lieu of FlagDropped).
			@param where Position of the flag spawn point.
			@param flagColor Color of the flag.
		*/
		["ami"] void FlagSpawned(VTankObject::Point where, 
			GameSession::Alliance flagColor);
		
		/**
			A flag has despawned, meaning that it is no longer on the map, and cannot
			be interacted with further. This may occur at the server's discretion.
			@param flagColor Which flag has despawned.
		*/
		["ami"] void FlagDespawned(GameSession::Alliance flagColor);
		
		/* Capture the Base */
		
		/**
		    A base has been captured, and switches control to the other team.
			@param oldBaseColor The color of the team that previously controlled it.
			@param newBaseColor The color that the Base should be switched to.
			@param baseId The event id of the base.
			
		*/
		["ami"] void BaseCaptured(GameSession::Alliance oldBaseColor, 
			GameSession::Alliance newBaseColor, int baseId, int capturerId);

		/**
		    Set base health to a new value, for the purpose of resetting its health or boosting it
			for some other reason.
			@param baseColor The color of the team that controls the base.
			@param baseId The event id of the base.
			@param newHealth The health value to set the base's health to.
		*/
		["ami"] void SetBaseHealth(GameSession::Alliance baseColor, int baseId, 
			int newHealth);
		
		/**
		    Inflict damage upon a base. 
			@param baseColor The color of the team that controls the base.
			@param baseId The event id of the base.
			@param damage The amount of damage to inflict upon the base.
			@param projectileId The projectile damaging it.
			@param playerId The id of the player who shot it.
			@param isDestroyed Determines whether this shot will destroy the base.
		*/
		["ami"] void DamageBase(GameSession::Alliance baseColor, int baseId, int damage,
			int projectileId, int playerId, bool isDestroyed);
		
		/**
			Inflict damage to a base from an environment effect.
			@param baseColor The color of the team that controls the base.
			@param baseId The event ID of the base.
			@param envId The environment effect's ID.
			@param damage Damage dealt to the base.
			@param isDestroyed True if the damage has destroyed the base; false
			otherwise.
		*/
		["ami"] void DamageBaseByEnvironment(GameSession::Alliance baseColor,
			int baseId, int envId, int damage, bool isDestroyed);
			
		/**
		    End a round after a game that has rounds during the map.
		*/
		["ami"] void EndRound(GameSession::Alliance winner);
    };
};

#endif
